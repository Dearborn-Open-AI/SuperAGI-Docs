"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9588],{3905:(t,e,o)=>{o.d(e,{Zo:()=>p,kt:()=>k});var n=o(7294);function r(t,e,o){return e in t?Object.defineProperty(t,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[e]=o,t}function i(t,e){var o=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),o.push.apply(o,n)}return o}function l(t){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?i(Object(o),!0).forEach((function(e){r(t,e,o[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(o,e))}))}return t}function a(t,e){if(null==t)return{};var o,n,r=function(t,e){if(null==t)return{};var o,n,r={},i=Object.keys(t);for(n=0;n<i.length;n++)o=i[n],e.indexOf(o)>=0||(r[o]=t[o]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)o=i[n],e.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(t,o)&&(r[o]=t[o])}return r}var s=n.createContext({}),u=function(t){var e=n.useContext(s),o=e;return t&&(o="function"==typeof t?t(e):l(l({},e),t)),o},p=function(t){var e=u(t.components);return n.createElement(s.Provider,{value:e},t.children)},d="mdxType",c={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},m=n.forwardRef((function(t,e){var o=t.components,r=t.mdxType,i=t.originalType,s=t.parentName,p=a(t,["components","mdxType","originalType","parentName"]),d=u(o),m=r,k=d["".concat(s,".").concat(m)]||d[m]||c[m]||i;return o?n.createElement(k,l(l({ref:e},p),{},{components:o})):n.createElement(k,l({ref:e},p))}));function k(t,e){var o=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=o.length,l=new Array(i);l[0]=m;var a={};for(var s in e)hasOwnProperty.call(e,s)&&(a[s]=e[s]);a.originalType=t,a[d]="string"==typeof t?t:r,l[1]=a;for(var u=2;u<i;u++)l[u]=o[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,o)}m.displayName="MDXCreateElement"},2360:(t,e,o)=>{o.r(e),o.d(e,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>a,toc:()=>u});var n=o(7462),r=(o(7294),o(3905));const i={},l="How to add a Custom Toolkit",a={unversionedId:"Toolkit/Adding Custom Toolkit/custom_toolkit",id:"Toolkit/Adding Custom Toolkit/custom_toolkit",title:"How to add a Custom Toolkit",description:"With a few easy-to-follow steps, you can get started with building and adding your own custom Toolkits to SuperAGI:",source:"@site/docs/Toolkit/Adding Custom Toolkit/custom_toolkit.md",sourceDirName:"Toolkit/Adding Custom Toolkit",slug:"/Toolkit/Adding Custom Toolkit/custom_toolkit",permalink:"/docs/Toolkit/Adding Custom Toolkit/custom_toolkit",draft:!1,editUrl:"https://github.com/TransformerOptimus/SuperAGI-Docs/tree/main/docs/Toolkit/Adding Custom Toolkit/custom_toolkit.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Toolkits",permalink:"/docs/Toolkit/"},next:{title:"SuperAGI's Toolkits",permalink:"/docs/Toolkit/SuperAGI Toolkits/"}},s={},u=[],p={toc:u},d="wrapper";function c(t){let{components:e,...o}=t;return(0,r.kt)(d,(0,n.Z)({},p,o,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"how-to-add-a-custom-toolkit"},"How to add a Custom Toolkit"),(0,r.kt)("p",null,"With a few easy-to-follow steps, you can get started with building and adding your own custom Toolkits to SuperAGI: "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 1"),": Set Up Your GitHub Repository. "),(0,r.kt)("p",null,"First things first, you need a place to store and manage your tool's code. For this, you can use GitHub. Create a new repository and make sure it contains the following files:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"__init__.py"),": This file is crucial as it helps Python recognize your repository as a package. It\u2019s usually an empty file."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tool1.py"),": This is where the code for your first tool should go."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tool2.py"),": If you have a second tool, this is where its code should reside."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"toolname_toolkit.py")," : This file will have the toolkit name, and description, followed by all tools and config details of that toolkit."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"requirements.txt"),": This file lists all the dependencies needed for your tool to run smoothly.")),(0,r.kt)("p",null,"Your repository structure should look something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-markdown"},"Your-Repository-Name \n\u251c\u2500\u2500 __init__.py \n\u251c\u2500\u2500 tool1.py \n\u251c\u2500\u2500 tool2.py \n\u251c\u2500\u2500 toolname_toolkit.py\n\u2514\u2500\u2500 requirements.txt\n")),(0,r.kt)("p",null,"You can find a sample repo here to understand custom tool building: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/luciferlinx101/GreetingTool"},"https://github.com/luciferlinx101/GreetingTool")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 2"),": Use the following pip command (",(0,r.kt)("a",{parentName:"p",href:"https://pypi.org/project/superagi-tools/"},"https://pypi.org/project/superagi-tools/"),") to get the required APIs and BaseTool related classes to easily integrate your tool with SuperAGI. Run the following command in your terminal or command prompt:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install superagi-tools\n")),(0,r.kt)("p",null,"This will install the necessary SuperAGI base tool and toolkit class."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 3"),": Start SuperAGI using \u201cDocker compose up\u201d Link Your GitHub Repository to SuperAGI. Next, you need to add your GitHub repository link to SuperAGI\u2019s front-end. This is how SuperAGI will know where to find your tool. When you add the GitHub link, it is stored in a database. Also, make sure to provide a name for your toolkit, which will be used to identify it on the SuperAGI platform. The GitHub link and toolkit name are stored in a file called\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"tools.json"),"\xa0like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{ "toolkit-name": "your-github-link" }\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 4"),": Once your GitHub link is added, the SuperAGI tool manager will take care of installing your tool along with it\u2019s dependencies. It will be placed in a directory named\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"superagi/tools"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 5"),": Once this is added, you have to restart your docker. Now that your tool is installed, it\u2019s time to build and run it. Run the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose down\ndocker compose up --build\n")),(0,r.kt)("p",null,"This command restarts your docker, builds it again, and runs it."),(0,r.kt)("p",null,"During the Docker run, your tool\u2019s dependencies (specified in\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"requirements.txt"),") will be installed. This is done automatically on startup by a script called\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"install-tool-dependency.sh"),". It automatically installs all the necessary dependencies for your tool. You'll now be able to use the Toolkit on your local GUI."))}c.isMDXComponent=!0}}]);