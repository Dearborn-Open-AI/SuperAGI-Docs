"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7073],{3905:(e,t,o)=>{o.d(t,{Zo:()=>u,kt:()=>k});var n=o(7294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function l(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?i(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function a(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):l(l({},t),e)),o},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),c=p(o),m=r,k=c["".concat(s,".").concat(m)]||c[m]||d[m]||i;return o?n.createElement(k,l(l({ref:t},u),{},{components:o})):n.createElement(k,l({ref:t},u))}));function k(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=o.length,l=new Array(i);l[0]=m;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[c]="string"==typeof e?e:r,l[1]=a;for(var p=2;p<i;p++)l[p]=o[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,o)}m.displayName="MDXCreateElement"},457:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>p});var n=o(7462),r=(o(7294),o(3905));const i={},l="How to add a Custom Toolkit",a={unversionedId:"Toolkit/custom_toolkit",id:"Toolkit/custom_toolkit",title:"How to add a Custom Toolkit",description:"With a few easy-to-follow steps, you can get started with building and adding your own custom Toolkits to SuperAGI:",source:"@site/docs/Toolkit/custom_toolkit.md",sourceDirName:"Toolkit",slug:"/Toolkit/custom_toolkit",permalink:"/docs/Toolkit/custom_toolkit",draft:!1,editUrl:"https://github.com/TransformerOptimus/SuperAGI-Docs/tree/main/docs/Toolkit/custom_toolkit.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Web Scraper",permalink:"/docs/Toolkit/SuperAGI Toolkits/webscraper"},next:{title:"Marketplace",permalink:"/docs/Marketplace/"}},s={},p=[],u={toc:p},c="wrapper";function d(e){let{components:t,...o}=e;return(0,r.kt)(c,(0,n.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"how-to-add-a-custom-toolkit"},"How to add a Custom Toolkit"),(0,r.kt)("p",null,"With a few easy-to-follow steps, you can get started with building and adding your own custom Toolkits to SuperAGI: "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 1"),": Set Up Your GitHub Repository. "),(0,r.kt)("p",null,"First things first, you need a place to store and manage your tool's code. For this, you can use GitHub. Create a new repository and make sure it contains the following files:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"__init__.py"),": This file is crucial as it helps Python recognize your repository as a package. It\u2019s usually an empty file."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tool1.py"),": This is where the code for your first tool should go."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tool2.py"),": If you have a second tool, this is where its code should reside."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"toolname_toolkit.py")," : This file will have the toolkit name, and description, followed by all tools and config details of that toolkit."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"requirements.txt"),": This file lists all the dependencies needed for your tool to run smoothly.")),(0,r.kt)("p",null,"Your repository structure should look something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-markdown"},"Your-Repository-Name \n\u251c\u2500\u2500 __init__.py \n\u251c\u2500\u2500 tool1.py \n\u251c\u2500\u2500 tool2.py \n\u251c\u2500\u2500 toolname_toolkit.py\n\u2514\u2500\u2500 requirements.txt\n")),(0,r.kt)("p",null,"You can find a sample repo here to understand custom tool building: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/luciferlinx101/GreetingTool"},"https://github.com/luciferlinx101/GreetingTool")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 2"),": Use the following pip command (",(0,r.kt)("a",{parentName:"p",href:"https://pypi.org/project/superagi-tools/"},"https://pypi.org/project/superagi-tools/"),") to get the required APIs and BaseTool related classes to easily integrate your tool with SuperAGI. Run the following command in your terminal or command prompt:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install superagi-tools\n")),(0,r.kt)("p",null,"This will install the necessary SuperAGI base tool and toolkit class."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 3"),": Start SuperAGI using \u201cDocker compose up\u201d Link Your GitHub Repository to SuperAGI. Next, you need to add your GitHub repository link to SuperAGI\u2019s front-end. This is how SuperAGI will know where to find your tool. When you add the GitHub link, it is stored in a database. Also, make sure to provide a name for your toolkit, which will be used to identify it on the SuperAGI platform. The GitHub link and toolkit name are stored in a file called\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"tools.json"),"\xa0like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{ "toolkit-name": "your-github-link" }\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 4"),": Once your GitHub link is added, the SuperAGI tool manager will take care of installing your tool along with it\u2019s dependencies. It will be placed in a directory named\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"superagi/tools"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Step 5"),": Once this is added, you have to restart your docker. Now that your tool is installed, it\u2019s time to build and run it. Run the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose down\ndocker compose up --build\n")),(0,r.kt)("p",null,"This command restarts your docker, builds it again, and runs it."),(0,r.kt)("p",null,"During the Docker run, your tool\u2019s dependencies (specified in\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"requirements.txt"),") will be installed. This is done automatically on startup by a script called\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"install-tool-dependency.sh"),". It automatically installs all the necessary dependencies for your tool. You'll now be able to use the Toolkit on your local GUI."))}d.isMDXComponent=!0}}]);