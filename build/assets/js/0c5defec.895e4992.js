"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4297],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(f,i(i({ref:t},s),{},{components:n})):r.createElement(f,i({ref:t},s))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4210:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:3},i="GitHub Codespaces",l={unversionedId:"Installation/gitcode",id:"Installation/gitcode",title:"GitHub Codespaces",description:"1. Open the SuperAGI GitHub repository https://github.com/TransformerOptimus/SuperAGI/ and click on Code > Codespaces > Create new codespace",source:"@site/docs/Installation/gitcode.md",sourceDirName:"Installation",slug:"/Installation/gitcode",permalink:"/docs/Installation/gitcode",draft:!1,editUrl:"https://github.com/TransformerOptimus/SuperAGI-Docs/tree/main/docs/Installation/gitcode.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Docker",permalink:"/docs/Installation/docker"},next:{title:"SuperAGI Cloud",permalink:"/docs/Installation/cloud"}},c={},p=[],s={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"github-codespaces"},"GitHub Codespaces"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Open the SuperAGI GitHub repository ",(0,o.kt)("inlineCode",{parentName:"li"},"https://github.com/TransformerOptimus/SuperAGI/")," and click on ",(0,o.kt)("inlineCode",{parentName:"li"},"Code > Codespaces > Create new codespace")),(0,o.kt)("li",{parentName:"ol"},"Navigate to the directory and create a copy of ",(0,o.kt)("inlineCode",{parentName:"li"},"config_template.yaml")," and name it ",(0,o.kt)("inlineCode",{parentName:"li"},"config.yaml"),"."),(0,o.kt)("li",{parentName:"ol"},"Open up the terminal at the bottom of the codespace and run the following command: ",(0,o.kt)("inlineCode",{parentName:"li"},"docker compose up --build")," and wait for the build to complete."),(0,o.kt)("li",{parentName:"ol"},"Go to the 'Ports' tab, copy the 8001 and 3000 public addresses. Replace the ",(0,o.kt)("inlineCode",{parentName:"li"},"localhost")," link in the ",(0,o.kt)("inlineCode",{parentName:"li"},"docker-compose.yaml")," file with the 8001 public address, and paste the 3000 public address as a string into the ",(0,o.kt)("inlineCode",{parentName:"li"},"main.py")," file."),(0,o.kt)("li",{parentName:"ol"},"Make sure to remove the trailing forward slash from the end of URL in both places."),(0,o.kt)("li",{parentName:"ol"},"Run the ",(0,o.kt)("inlineCode",{parentName:"li"},"docker compose up --build")," command again."),(0,o.kt)("li",{parentName:"ol"},"Once the build is complete, change the visibility of both ports to public and open the 3000 public URL in a new tab.")))}u.isMDXComponent=!0}}]);